@startuml

class DatabaseConnector{
  - Connection con
  - int sortCriteria
  - static final int SORT_ACCORDING_LIKE_COUNT = 1
  - static final int SORT_ACCORDING_DATE = 2
  ...
  static final integers defined to enumerate sort criterias.
  ___
  + DatabaseConnector()
  + int getUserID(String username, String password)
  it provides login or returns 0 if no such user exists
  + int registerUser(User u)
  it adds user to database and returns their id,
  if addition is insuccessful or such user already exists,
  returns 0
  
  ArrayList<EventPost> getEventPosts(int sortCriteria)
  ArrayList<EventPost> getFollowedPosts(User byUser, int sortCriteria)
  ArrayList<ForumPost> getLikedPosts(User byUser, int sortCriteria)
  ArrayList<Post> getOwnedPosts(User byUser, int sortCriteria)
  
  boolean updateEventPosts(EventPost modification, boolean isAdd)
  boolean updateFollowedPosts(User u, EventPost modification, boolean isAdd)
  boolean updateLikedPosts(User u, EventPost modification, boolean isAdd)
  boolean updateOwnedPosts(User u, EventPost modification, boolean isAdd)
  
  ArrayList<Message> getMessagesBetween(User first, User second)
  boolean editUserContentItem(int idInTable, String newText)
  boolean swapDormInfo(User first, User second)
  boolean addReview(Review r, Location toLocation)
}


class University
{
  + University(String name, ArrayList<Campus> campuses)
  + University(String name,
              ArrayList<Campus> campuses, ArrayList<User> students)
  __
  - static int numberOfInstances
  - int universityId
  - String name
  -ArrayList<Campus> campuses
  -ArrayList<User> students
}

class User{
  + User(String name, String email, String password)
  + User(String name, String email, String password, Room room)
  __
  - static int numberOfInstances
  -int userId
  ..personal info of user..
  -String name
  -Room room
  -String biography
  -String email
  -String password
  -Image profilePicture
  -enum Major
  
  ..relations with other users and content..
  -ArrayList<User> friends
  -ArrayList<ForumPost> liked
  -ArrayList<EventPost> followedEvents
  -ArrayList<FriendRequest> pendingIncomingRequests
  -ArrayList<FriendRequest> pendingRequests
  -ArrayList<Post> postsOwned
  
  ..adders and removers for above..

  + void transferDorm(User u)
  + void transferDorm(Room room)
  
  --- Comparator Classes ---
  ... all override compare method ...
  + static class IDComparator
  implements Comparator<User>
  + static class NameComparator
  implements Comparator<User>
  
}

class Campus
{
  + Campus(String name)
  __
  - static int numberOfInstances
  - int campusId
  - String name
  - ArrayList<Dormitory> dormitories
  - ArrayList<Cafeteria> cafeterias
}

interface Reviewable
{
  + addReview()
}

package location{
  
  abstract class Location implements .Reviewable
  {
    + Location(String name, String description, Campus campus)
    + Location(String name, String description, Campus campus, Image image)
    __
    - static int numberOfInstances
    - int locationId
    - ArrayList<Review> reviews
    - Image image
    - String name
    - String description
    - double rating    
    - Campus campus
    + void addReview(Review r)
    + void removeReview(Review r)
    
  --- Comparator Classes ---
  ... all override compare method ...
  + static class IDComparator
  implements Comparator<Location>
  + static class NameComparator
  implements Comparator<Location>
  + static class RatingComparator
  implements Comparator<Location>
  }
  
  package cafeteria
  {
    class Cafeteria extends location.Location
    {
      + Cafeteria(String name, String description, Campus campus)
      + Cafeteria(String name, String description, Campus campus,
                  Image image)
      + Cafeteria(String name, String description, Campus campus,
                  Image image, ArrayList<MenuItem> items)
      __
      - double minPrice
      - double maxPrice
      - ArrayList<MenuItem> items
      --- Comparator Classes ---
      ... all override compare method ...
      + static class PriceComparator
      implements Comparator<Cafeteria>
    }
    
    class MenuItem
    {
      + MenuItem(String name, double price)
      + MenuItem(String name, double price, Image image)
      __
      - static int numberOfInstances
      - int menuItemId
      - String name
      - double price
      - Image image
      --- Comparator Classes ---
      ... all override compare method ...
      + static class IDComparator
      implements Comparator<MenuItem>
      + static class NameComparator
      implements Comparator<MenuItem>
     + static class PriceComparator
      implements Comparator<MenuItem>
    }
  }
  
  class Dormitory extends Location
  {
    + Dormitory(String name, String description, Campus campus)
    + Dormitory(String name, String description, Campus campus,
                Image image, ArrayList<Room> rooms)
    __
    - ArrayList<Room> rooms
    --- Comparator Classes ---
    ... all override compare method ...
    + static class CapacityComparator
    implements Comparator<Dormitory>
    + static class AvailabilityComparator
    implements Comparator<Dormitory>
  }
  
  class Room
  {
    + Room(int capacity, Dormitory Dorm,
          boolaen isBunk, boolean privateBathroom)
    __
    - static int numberOfInstances
    - int roomId
    - int capacity
    - Dormitory dorm
    - int availableBed
    - boolean isBunk
    - boolean privateBathroom
    
    --- Comparator Classes ---
    ... all override compare method ...
    + static class IDComparator
    implements Comparator<Room>
    + static class CapacityComparator
    implements Comparator<Room>
    + static class LuxuryComparator
    implements Comparator<Room>
    + static class AvailabilityComparator
    implements Comparator<Room>
  }
  
}

class FriendRequest
{
  + FriendRequest(User sender, User, reciever)
  __
  - static int numberOfInstances
  - int friendRequestId
  - User sender
  - User receiver
  + void acceptRequest()
  + void rejectRequest()
  --- Comparator Classes ---
  ... all override compare method ...
  + static class IDComparator
  implements Comparator<FriendRequest>

}


package userContent
{
  abstract class UserContentItem 
  {
    + UserContentItem(User owner, String mainText)
    __
    - static int numberOfInstances
    - final Date creationDate
    - int userContentItemId
    - String mainText
    - Date lastEditDate
    ** Java Date Class **
    - final User owner
    __
    + void edit(String newText)
    use setDate() internally to 
    show last edit date
    + void delete()
    
    --- Comparator Classes ---
    ... all override compare method ...
    + static class IDComparator
    implements Comparator<UserContentItem>
    + static class DateComparator
    implements Comparator<UserContentItem>
    
  }
  
  package post
  {
    abstract class Post extends userContent.UserContentItem
    {
      + Post(User owner, String mainText, String heading, ArrayList<File> files)
      + Post(User owner, String mainText, String heading)
      __
      - String heading
      - ArrayList<File> attachments
      __
      @Overload
      + void edit(String heading,
      String description)
      
    }
    
    class ForumPost extends Post
    {
      + ForumPost(User owner, String mainText, ArrayList<Tags> tags)
      + ForumPost(User owner, String mainText, ArrayList<Tag> tags,
                  ArrayList<Reply> replies, ArrayList<User> likedBy)
      __
      - int likeCount
      - ArrayList<Tag> tags
      - ArrayList<Reply> replies
      - ArrayList<User> likedBy
      + void addReply(Reply r)
      + void removeReply(Reply r)
      + void likeBy(User user)
      + void removeLike(User user)
      
      --- Comparator Classes ---
      ... all override compare method ...
      + static class LikeCountComparator
      implements Comparator<ForumPost>
    
    }
    class DormTransferPost extends Post
    {
      + DormTransferPost(User owner, String mainText, Room room)
      __
      - Room room
    }
    
    class EventPost extends Post
    {
      + EventPost(String place, Date date, String info)
      __
      - String location
      - Date eventDate
      - String importantInfo
      - ArrayList<User> followers
      
      + void addFollower(User u)
      + void removeFollower(User u)
      + void notifyFollowers()
      
      --- Comparator Classes ---
      ... all override compare method ...
      + static class FollowerCountComparator
      implements Comparator<EventPost>
    
    }
    
    class Tag
    {
      + Tag(String tagName)
      __
      - static int numberOfInstances
      - int tagId
      - String tagName
      
      --- Comparator Classes ---
      ... all override compare method ...
      + static class IDComparator
      implements Comparator<Tag>
      + static class NameComparator
      implements Comparator<Tag>
      
    }
    
  }
  
  class Message extends UserContentItem
  {
    + Message(User owner, String mainText, User reciever)
    __
    - User receiver
  }
  
  class Review extends UserContentItem
  {
    + Review(Reviewable r, double rating)
    __
    - Reviewable r
    - double rateGiven
    + void edit(String newText, double newRating)
  }
  
  class Reply extends UserContentItem
  {
    + Reply(User owner, String mainText, Post previous)
    __
    - Post previous
  }
}

University *-- Campus
University *-- User
Campus *-- Cafeteria
Campus *-- Dormitory
Cafeteria *-- MenuItem
FriendRequest *-- User
ForumPost *-- Reply
Location o-- Review
Dormitory *-- Room
User *-- Post
ForumPost *--Tag



@enduml
